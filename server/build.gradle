plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'java'
}

group = 'com.notfound'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asccidoctorExtensions
}

dependencies {
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asccidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	tasks.name('test') {
		outputs.dir snippetsDir
		useJUnitPlatform()
	}

	tasks.named('asciidoctor') {
		configurations "asciidoctorExtensions"
		inputs.dir snippetsDir
		dependsOn test
	}

	task copyDocument(type: Copy) {
		dependsOn asccidoctor
		from file("${asccidoctor.outputDir}")
		into file("src/main/resources/static/docs")
	}

	build {
		dependsOn copyDocument
	}

	bootJar {
		dependsOn copyDocument
		from ("${asccidoctor.outputDir}") {
			into 'static/docs'
		}

	}

	// mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	// database
	runtimeOnly 'com.mysql:mysql-connector-j'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	// jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'
	// gson
	implementation 'com.google.code.gson:gson'
}

tasks.named('test') {
	useJUnitPlatform()
}
